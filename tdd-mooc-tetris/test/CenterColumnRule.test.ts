import { describe, test } from "vitest";
import { Board } from "../src/Board";
import { Tetromino } from "../src/Tetromino";
import { expect } from "chai";
import { moveLeft, moveRight } from "./utils";

describe("Center column rule", () => {
  test("can not kick if center column collides 1", () => {
    const board = Board.loadBoard(
      `..........
     ..........
     ..........
     ....X.....
     ..........
     ..........`
    );

    board.drop(Tetromino.L_SHAPE);
    board.tick();
    board.tick();
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `..........
     ..........
     ...LLL....
     ...LX.....
     ..........
     ..........`
    );
  });

  test("can not kick if center column collides 2", () => {
    const board = Board.loadBoard(
      `..........
     ..........
     .......X..
     ..........
     ..........
     ..........`
    );

    board.drop(Tetromino.L_SHAPE);
    board.tick();
    board.tick();
    board.tick();
    moveRight(board, 3);
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `..........
     ..........
     .......X..
     ......LLL.
     ......L...
     ..........`
    );
  });

  test("can not kick if center column collides 3", () => {
    const board = Board.loadBoard(
      `..........
     ..........
     ..X.......
     ..........
     ..........
     ..........`
    );

    board.drop(Tetromino.L_SHAPE);
    board.tick();
    board.tick();
    board.tick();
    board.rotateRight().rotateRight();
    moveLeft(board, 2);
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `..........
     ..........
     ..X.......
     ...L......
     .LLL......
     ..........`
    );
  });

  test("can not kick if center column collides 4", () => {
    const board = Board.loadBoard(
      `..........
     ..........
     ..........
     ..X.......
     ..........
     ..........`
    );

    board.drop(Tetromino.L_SHAPE);
    board.tick();
    board.tick();
    board.tick();
    board.rotateRight().rotateRight();
    moveLeft(board, 2);
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `..........
     ..........
     ..........
     ..XL......
     .LLL......
     ..........`
    );
  });

  test("Clockwise rotation will successfully kick even if a different collision is detected before 1", () => {
    const board = Board.loadBoard(
      `..........
     ..........
     ......X...
     ..........
     .......X..
     ..........`
    );

    board.drop(Tetromino.L_SHAPE);
    board.tick();
    board.tick();
    board.tick();
    moveRight(board, 3);
    board.rotateRight();

    expect(board.toString()).to.equalShape(
      `..........
     ..........
     ......XLL.
     ........L.
     .......XL.
     ..........`
    );
  });

  test("Counter-clockwise rotation will successfully kick even if a different collision is detected before 2", () => {
    const board = Board.loadBoard(
      `..........
     ..........
     .X........
     ..X.......
     ..........
     ..........`
    );

    board.drop(Tetromino.L_SHAPE);
    board.rotateLeft();
    board.tick();
    board.tick();
    board.rotateLeft();
    moveLeft(board, 2);
    board.rotateLeft();

    expect(board.toString()).to.equalShape(
      `..........
     ..........
     .XLL......
     ..XL......
     ...L......
     ..........`
    );
  });
});
